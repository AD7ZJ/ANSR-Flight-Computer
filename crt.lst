ARM GAS  /tmp/ccK7MBbY.s 			page 1


   1              	# 1 "crt.s"
   1              	/***************************************************************************
   1              	...
   0              	
   0              	
   2              	 *                                                                         *
   3              	 *                              ESS, Inc.                                  *
   4              	 *                                                                         *
   5              	 *    ESS, Inc. CONFIDENTIAL AND PROPRIETARY.  This source is the sole     *
   6              	 *    property of ESS, Inc.  Reproduction or utilization of this source    *
   7              	 *    in whole or in part is forbidden without the written consent of      *
   8              	 *    ESS, Inc.                                                            *
   9              	 *                                                                         *
  10              	 ***************************************************************************
  11              	 *                                                                         *
  12              	 *            (c) Copyright 1997-2009 -- All Rights Reserved               *
  13              	 *                                                                         *
  14              	 ***************************************************************************
  15              	 *                                                                         *
  16              	 * Filename:     crt.s                                                     *
  17              	 *                                                                         *
  18              	 * Description:  C-runtime library setup, interrupt vectors, and           *
  19              	 *               start-up code.  This is generally the only assembly       *
  20              	 *               code we have in the system.                               *
  21              	 *                                                                         *
  22              	 * History:      v 1.0 - Initial release                                   *
  23              	 *                                                                         *
  24              	 *               v 1.1 - Ported for use with CodeSourcery Tool Chain       *
  25              	 *                                                                         *
  26              	 ***************************************************************************/
  27              	
  28              	    .global main                    // int main(void)
  29              	
  30              	    .global _etext                  // -> .data initial values in ROM
  31              	    .global _data                   // -> .data area in RAM
  32              	    .global _edata                  // end of .data area
  33              	    .global __bss_start             // -> .bss area in RAM
  34              	    .global __bss_end__             // end of .bss area
  35              	    .global __stack_start
  36              	    .global __stack_end             // top of stack
  37              	
  38              	// Standard definitions of Mode bits and Interrupt (I & F) flags in PSRs
  39              	    .set  MODE_USR, 0x10            // User Mode
  40              	    .set  MODE_FIQ, 0x11            // FIQ Mode
  41              	    .set  MODE_IRQ, 0x12            // IRQ Mode
  42              	    .set  MODE_SVC, 0x13            // Supervisor Mode
  43              	    .set  MODE_ABT, 0x17            // Abort Mode
  44              	    .set  MODE_UND, 0x1B            // Undefined Mode
  45              	    .set  MODE_SYS, 0x1F            // System Mode
  46              	
  47              	    .equ  I_BIT, 0x80               // when I bit is set, IRQ is disabled
  48              	    .equ  F_BIT, 0x40               // when F bit is set, FIQ is disabled
  49              	
  50              	    .equ STACK_FILL, 0xdeadbeef
  51              	
  52              	    .text
  53              	    .code 32
ARM GAS  /tmp/ccK7MBbY.s 			page 2


  54              	    .align 2
  55              	
  56              	    .global _boot
  57              	    .func   _boot
  58              	_boot:
  59              	
  60              	// Runtime Interrupt Vectors
  61              	// -------------------------
  62              	Vectors:
  63 0000 FEFFFFEA 	    b     _start                    // reset - _start
  64 0004 14F09FE5 	    ldr   pc,_undf                  // undefined - _undf
  65 0008 14F09FE5 	    ldr   pc,_swi                   // SWI - _swi
  66 000c 14F09FE5 	    ldr   pc,_pabt                  // program abort - _pabt
  67 0010 14F09FE5 	    ldr   pc,_dabt                  // data abort - _dabt
  68 0014 0000A0E1 	    nop                             // reserved
  69 0018 30F09FE5 	    ldr pc, irq_addr           // IRQ - read the VIC
  70 001c 10F09FE5 	    ldr   pc,_fiq                   // FIQ - _fiq
  71              	
  72 0020 38000000 	_undf:  .word __undf                    // undefined
  73 0024 3C000000 	_swi:   .word __swi                     // SWI
  74 0028 40000000 	_pabt:  .word __pabt                    // program abort
  75 002c 44000000 	_dabt:  .word __dabt                    // data abort
  76 0030 48000000 	_irq:   .word __irq                     // IRQ
  77 0034 4C000000 	_fiq:   .word __fiq                     // FIQ
  78              	
  79 0038 FEFFFFEA 	__undf: b     .                         // undefined
  80 003c FEFFFFEA 	__swi:  b     .                         // SWI
  81 0040 FEFFFFEA 	__pabt: b     .                         // program abort
  82 0044 FEFFFFEA 	__dabt: b     .                         // data abort
  83 0048 FEFFFFEA 	__irq:  b     .                         // IRQ
  84 004c FEFFFFEA 	__fiq:  b     .                         // FIQ
  85              	        .size _boot, . - _boot
  86              	        .endfunc
  87              	
  88 0050 54000000 	irq_addr: .word irq_isr
  89              	irq_isr:
  90              	// Save IRQ context, including the APCS registers, and r4-6
  91 0054 04E04EE2 	    sub   lr, lr, #4
  92 0058 7F502DE9 	    stmfd sp!, {r0-r6, ip, lr}
  93              	
  94              	// Save the SPSR_irq register
  95 005c 00404FE1 	    mrs r4, spsr
  96              	
  97              	// Read the VICVectAddr */
  98 0060 28509FE5 	    ldr r5, VICVECTADDR
  99 0064 006095E5 	    ldr r6, [r5]
 100              	
 101              	// Change to SYS mode and enable IRQ
 102 0068 1FF021E3 	    msr cpsr_c, #MODE_SYS
 103              	
 104              	// Save the banked SYS mode link register
 105 006c 04E02DE5 	    stmfd sp!, {lr}
 106              	
 107              	// Call the C-coded handler
 108 0070 0FE0A0E1 	    mov lr, pc
 109 0074 06F0A0E1 	    mov pc, r6
 110              	
ARM GAS  /tmp/ccK7MBbY.s 			page 3


 111              	// Restore SYS mode link register
 112 0078 04E09DE4 	    ldmfd sp!, {lr}
 113              	
 114              	// Change to IRQ mode and disable IRQ
 115 007c 92F021E3 	    msr cpsr_c, #MODE_IRQ|IRQ_DISABLE
 116              	
 117              	// Restore the SPSR
 118 0080 04F069E1 	    msr spsr, r4
 119              	
 120              	// Acknowledge the VIC
 121 0084 0000A0E3 	    mov r0, #0
 122 0088 000085E5 	    str r0, [r5]
 123              	
 124              	// Restore IRQ context and return from interrupt
 125 008c 7F90FDE8 	    ldmfd sp!, {r0-r6, ip, pc}^
 126              	
 127 0090 30F0FFFF 	VICVECTADDR:     .word   0xFFFFF030
 128              	    .equ IRQ_DISABLE,    (1 << 7)
 129              	
 130              	// Setup the operating mode & stack.
 131              	    .global _start
 132              	    .func   _start
 133              	
 134              	// Generate 32-bit arm code.
 135              	    .code 32
 136              	
 137              	_start:
 138              	// Set the IRQ stack pointer.
 139 0094 D2F021E3 	    msr     CPSR_c,#(MODE_IRQ | I_BIT | F_BIT)
 140 0098 80D09FE5 	    ldr     sp,=__irq_stack_top__
 141              	
 142              	// Set the FIQ stack pointer.
 143 009c D1F021E3 	    msr     CPSR_c,#(MODE_FIQ | I_BIT | F_BIT)
 144 00a0 7CD09FE5 	    ldr     sp,=__fiq_stack_top__
 145              	
 146              	// Set the SVC stack pointer.
 147 00a4 D3F021E3 	    msr     CPSR_c,#(MODE_SVC | I_BIT | F_BIT)
 148 00a8 78D09FE5 	    ldr     sp,=__svc_stack_top__
 149              	
 150              	// Set the ABT stack pointer.
 151 00ac D7F021E3 	    msr     CPSR_c,#(MODE_ABT | I_BIT | F_BIT)
 152 00b0 74D09FE5 	    ldr     sp,=__abt_stack_top__
 153              	
 154              	// Set the UND stack pointer.
 155 00b4 DBF021E3 	    msr     CPSR_c,#(MODE_UND | I_BIT | F_BIT)
 156 00b8 70D09FE5 	    ldr     sp,=__und_stack_top__
 157              	
 158              	// Set the C stack pointer.
 159 00bc DFF021E3 	    msr     CPSR_c,#(MODE_SYS | I_BIT | F_BIT)
 160 00c0 6CD09FE5 	    ldr     sp,=__c_stack_top__
 161              	
 162              	
 163              	// Copy initialized data to its execution address in RAM
 164 00c4 6C109FE5 	    ldr   r1,=_etext                // -> ROM data start
 165 00c8 6C209FE5 	    ldr   r2,=_data                 // -> data start
 166 00cc 6C309FE5 	    ldr   r3,=_edata                // -> end of data
 167 00d0 030052E1 	1:  cmp   r2,r3                     // check if data to move
ARM GAS  /tmp/ccK7MBbY.s 			page 4


 168 00d4 04009134 	    ldrlo r0,[r1],#4                // copy it
 169 00d8 04008234 	    strlo r0,[r2],#4
 170 00dc FBFFFF3A 	    blo   1b                        // loop until done
 171              	
 172              	// Clear .bss
 173 00e0 0000A0E3 	    mov   r0,#0                     // get a zero
 174 00e4 58109FE5 	    ldr   r1,=__bss_start           // -> bss start
 175 00e8 58209FE5 	    ldr   r2,=__bss_end             // -> bss end
 176 00ec 020051E1 	2:  cmp   r1,r2                     // check if data to clear
 177 00f0 04008134 	    strlo r0,[r1],#4                // clear 4 bytes
 178 00f4 FCFFFF3A 	    blo   2b                        // loop until done
 179              	
 180              	// Fill the stack with a known pattern to make it easier to detect stack over flows.
 181 00f8 4C009FE5 	    ldr     r0,=STACK_FILL
 182 00fc 4C109FE5 	    ldr     r1,=__stack_start
 183 0100 4C209FE5 	    ldr     r2,=__stack_end
 184 0104 020051E1 	3:  cmp     r1,r2
 185 0108 0100A1B8 	    stmltia r1!,{r0}
 186 010c FCFFFF3A 	    blo     3b
 187              	
 188              	// Call the static C++ constructors.
 189 0110 40C09FE5 	    LDR     r12,=__libc_init_array
 190 0114 0FE0A0E1 	    MOV     lr,pc
 191 0118 1CFF2FE1 	    BX      r12
 192              	
 193              	
 194              	// Jump to the C/C++ entry point.
 195 011c FEFFFFEA 	    b       main
 196              	
 197              	    .size   _start, . - _start
 198 0120 00000000 	    .endfunc
 198      00000000 
 198      00000000 
 198      00000000 
 198      00000000 
ARM GAS  /tmp/ccK7MBbY.s 			page 5


DEFINED SYMBOLS
               crt.s:39     *ABS*:00000010 MODE_USR
               crt.s:40     *ABS*:00000011 MODE_FIQ
               crt.s:41     *ABS*:00000012 MODE_IRQ
               crt.s:42     *ABS*:00000013 MODE_SVC
               crt.s:43     *ABS*:00000017 MODE_ABT
               crt.s:44     *ABS*:0000001b MODE_UND
               crt.s:45     *ABS*:0000001f MODE_SYS
               crt.s:47     *ABS*:00000080 I_BIT
               crt.s:48     *ABS*:00000040 F_BIT
               crt.s:50     *ABS*:deadbeef STACK_FILL
               crt.s:54     .text:00000000 $a
               crt.s:58     .text:00000000 _boot
               crt.s:62     .text:00000000 Vectors
               crt.s:137    .text:00000094 _start
               crt.s:72     .text:00000020 _undf
               crt.s:73     .text:00000024 _swi
               crt.s:74     .text:00000028 _pabt
               crt.s:75     .text:0000002c _dabt
               crt.s:88     .text:00000050 irq_addr
               crt.s:77     .text:00000034 _fiq
               crt.s:72     .text:00000020 $d
               crt.s:79     .text:00000038 __undf
               crt.s:80     .text:0000003c __swi
               crt.s:81     .text:00000040 __pabt
               crt.s:82     .text:00000044 __dabt
               crt.s:76     .text:00000030 _irq
               crt.s:83     .text:00000048 __irq
               crt.s:84     .text:0000004c __fiq
               crt.s:79     .text:00000038 $a
               crt.s:88     .text:00000050 $d
               crt.s:89     .text:00000054 irq_isr
               crt.s:91     .text:00000054 $a
               crt.s:127    .text:00000090 VICVECTADDR
                            *ABS*:00000080 IRQ_DISABLE
               crt.s:127    .text:00000090 $d
               crt.s:139    .text:00000094 $a
               crt.s:198    .text:00000120 $d
                   .debug_aranges:0000000c $d

UNDEFINED SYMBOLS
main
_etext
_data
_edata
__bss_start
__bss_end__
__stack_start
__stack_end
__irq_stack_top__
__fiq_stack_top__
__svc_stack_top__
__abt_stack_top__
__und_stack_top__
__c_stack_top__
__bss_end
__libc_init_array
ARM GAS  /tmp/ccK7MBbY.s 			page 6


